// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Relations avec nos tables métier
  emailTrackings EmailTracking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tables métier pour le suivi d'emails
model EmailTracking {
  id            String   @id @default(cuid())
  messageId     String   // Internet Message ID d'Outlook
  toEmail       String
  subject       String
  sentDate      DateTime
  status        EmailStatus @default(PENDING)
  reminderCount Int      @default(0)
  lastReminder  DateTime?
  createdBy     String   // User ID
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user    User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  replies EmailReply[]

  @@index([createdBy, status])
  @@index([messageId])
  @@map("email_tracking")
}

model EmailReply {
  id              String   @id @default(cuid())
  trackingId      String
  replyMessageId  String
  replyDate       DateTime
  fromEmail       String
  replySubject    String?
  createdAt       DateTime @default(now())

  // Relations
  tracking EmailTracking @relation(fields: [trackingId], references: [id], onDelete: Cascade)

  @@index([trackingId])
  @@map("email_replies")
}

// Configuration des jobs/tâches automatiques
model CronJob {
  id          String   @id @default(cuid())
  name        String   @unique
  lastRun     DateTime?
  nextRun     DateTime?
  isActive    Boolean  @default(true)
  errorCount  Int      @default(0)
  lastError   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cron_jobs")
}

// Logs pour le debugging
model ActivityLog {
  id        String      @id @default(cuid())
  userId    String?
  action    LogAction
  details   String?
  metadata  Json?       // Données additionnelles en JSON
  createdAt DateTime    @default(now())

  @@index([userId, createdAt])
  @@map("activity_logs")
}

// Enums
enum EmailStatus {
  PENDING   // En attente de réponse
  REPLIED   // Réponse reçue
  STOPPED   // Suivi arrêté manuellement
  EXPIRED   // Trop de relances envoyées
}

enum LogAction {
  EMAIL_TRACKED
  REPLY_DETECTED
  REMINDER_SENT
  TRACKING_STOPPED
  ERROR_OCCURRED
}
import { webhookService } from '@/lib/microsoft/webhook-service'
import { syncOutlookSentEmails } from '@/lib/microsoft/sync-service'
import { validateWebhookEnvironment, logValidationResult } from '@/lib/utils/env-validator'

interface TrackingConfig {
  webhookEnabled: boolean
  syncFallbackEnabled: boolean
  syncIntervalMinutes: number
  lastWebhookCheck: Date | null
  webhookHealthy: boolean
}

class AdaptiveTrackingService {
  private config: TrackingConfig = {
    webhookEnabled: process.env.WEBHOOK_ENABLED === 'true',
    syncFallbackEnabled: process.env.SYNC_FALLBACK_ENABLED !== 'false',
    syncIntervalMinutes: parseInt(process.env.SYNC_INTERVAL_MINUTES || '15'),
    lastWebhookCheck: null,
    webhookHealthy: false
  }

  /**
   * D√©marrer le syst√®me de tracking adaptatif
   */
  async start() {
    console.log('üöÄ D√©marrage du syst√®me de tracking adaptatif')
    
    // V√©rifier la sant√© des webhooks
    await this.checkWebhookHealth()
    
    // Strat√©gie bas√©e sur la disponibilit√©
    if (this.config.webhookEnabled && this.config.webhookHealthy) {
      await this.startWebhookMode()
    } else {
      await this.startSyncMode()
    }
    
    // Surveillance continue
    this.startHealthMonitoring()
  }

  /**
   * V√©rifier si les webhooks sont fonctionnels
   */
  private async checkWebhookHealth(): Promise<boolean> {
    try {
      console.log('üîç V√©rification de la sant√© des webhooks...')
      
      // Validation compl√®te de l'environnement
      const validation = validateWebhookEnvironment()
      logValidationResult(validation)
      
      if (!validation.isValid) {
        console.log('‚ùå Variables d\'environnement manquantes pour les webhooks')
        this.config.webhookHealthy = false
        return false
      }
      
      const endpointUrl = process.env.WEBHOOK_ENDPOINT_URL!

      // Test de l'endpoint (contourner les limitations serverless)
      try {
        console.log('üîç V√©rification de l\'endpoint:', endpointUrl)
        
        // Strat√©gie adapt√©e selon l'environnement
        const isProduction = process.env.NODE_ENV === 'production'
        const isVercel = process.env.VERCEL === '1'
        
        if (isProduction || isVercel) {
          // En production/Vercel : validation de l'URL seulement (pas de self-fetch)
          const isValidUrl = endpointUrl.startsWith('https://') && endpointUrl.includes('/api/webhooks/outlook')
          
          if (isValidUrl) {
            console.log('‚úÖ URL webhook valide (validation production)')
            this.config.webhookHealthy = true
          } else {
            throw new Error('URL webhook mal form√©e')
          }
        } else {
          // En d√©veloppement local : test de connectivit√© r√©el
          const response = await fetch(endpointUrl, { 
            method: 'GET',
            timeout: 5000 
          } as any)
          
          if (response.ok) {
            console.log('‚úÖ Endpoint webhook accessible (test local)')
            this.config.webhookHealthy = true
          } else {
            throw new Error(`HTTP ${response.status}`)
          }
        }
        
      } catch (error) {
        console.log('‚ùå Configuration webhook invalide:', error)
        this.config.webhookHealthy = false
      }

      // V√©rifier les subscriptions actives
      if (this.config.webhookHealthy) {
        const subscriptions = await webhookService.listSubscriptions()
        const activeCount = subscriptions.length
        
        console.log(`üìä ${activeCount} subscription(s) active(s)`)
        
        if (activeCount === 0) {
          console.log('‚ö†Ô∏è Aucune subscription active')
          console.log('üí° Le syst√®me permet la cr√©ation manuelle de subscriptions')
          // Ne pas marquer comme non healthy - permettre la cr√©ation de subscriptions
        }
      }

      this.config.lastWebhookCheck = new Date()
      return this.config.webhookHealthy
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification webhook:', error)
      this.config.webhookHealthy = false
      return false
    }
  }

  /**
   * D√©marrer le mode webhook (temps r√©el)
   */
  private async startWebhookMode() {
    console.log('‚ö° Mode WEBHOOK actif - d√©tection temps r√©el')
    console.log('üì± Les r√©ponses seront d√©tect√©es instantan√©ment')
    
    // Synchronisation de rattrapage moins fr√©quente (1x par jour)
    if (this.config.syncFallbackEnabled) {
      console.log('üîÑ Sync de backup programm√©e (1x/jour)')
      setInterval(async () => {
        console.log('üîÑ Sync de backup...')
        await syncOutlookSentEmails({ days: 1 })
      }, 24 * 60 * 60 * 1000) // 24h
    }
  }

  /**
   * D√©marrer le mode synchronisation (fallback)
   */
  private async startSyncMode() {
    console.log('üîÑ Mode SYNCHRONISATION - polling p√©riodique')
    console.log(`‚è∞ V√©rification toutes les ${this.config.syncIntervalMinutes} minutes`)
    
    // Synchronisation imm√©diate
    await this.performSync()
    
    // Synchronisation p√©riodique
    setInterval(async () => {
      await this.performSync()
    }, this.config.syncIntervalMinutes * 60 * 1000)
  }

  /**
   * Effectuer une synchronisation
   */
  private async performSync() {
    try {
      console.log('üîÑ Synchronisation Outlook en cours...')
      const result = await syncOutlookSentEmails()
      
      if (result.success) {
        console.log(`‚úÖ Sync r√©ussie: ${result.newTrackedEmails} nouveaux, ${result.updatedTrackedEmails} mis √† jour`)
      } else {
        console.log('‚ùå Sync √©chou√©e:', result.error)
      }
    } catch (error) {
      console.error('‚ùå Erreur de synchronisation:', error)
    }
  }

  /**
   * Surveillance continue de la sant√© du syst√®me
   */
  private startHealthMonitoring() {
    console.log('üîç Surveillance syst√®me d√©marr√©e (v√©rification toutes les 30min)')
    
    setInterval(async () => {
      const previousHealth = this.config.webhookHealthy
      await this.checkWebhookHealth()
      
      // Basculement automatique
      if (previousHealth && !this.config.webhookHealthy) {
        console.log('üîÑ Basculement WEBHOOK ‚Üí SYNC (webhook indisponible)')
        await this.startSyncMode()
      } else if (!previousHealth && this.config.webhookHealthy) {
        console.log('‚ö° Basculement SYNC ‚Üí WEBHOOK (webhook restaur√©)')
        await this.startWebhookMode()
      }
      
    }, 30 * 60 * 1000) // 30 minutes
  }

  /**
   * Obtenir le statut actuel
   */
  getStatus() {
    return {
      mode: this.config.webhookHealthy ? 'webhook' : 'sync',
      webhookEnabled: this.config.webhookEnabled,
      webhookHealthy: this.config.webhookHealthy,
      syncFallbackEnabled: this.config.syncFallbackEnabled,
      syncInterval: this.config.syncIntervalMinutes,
      lastCheck: this.config.lastWebhookCheck
    }
  }

  /**
   * Forcer une v√©rification manuelle
   */
  async forceHealthCheck() {
    console.log('üîÑ V√©rification forc√©e de la sant√© du syst√®me...')
    return await this.checkWebhookHealth()
  }
}

// Export d'une instance singleton
export const adaptiveTracking = new AdaptiveTrackingService()

// Helper pour initialiser le syst√®me
export async function initializeTracking() {
  try {
    await adaptiveTracking.start()
    console.log('üéØ Syst√®me de tracking initialis√© avec succ√®s')
  } catch (error) {
    console.error('‚ùå Erreur d\'initialisation du tracking:', error)
  }
}
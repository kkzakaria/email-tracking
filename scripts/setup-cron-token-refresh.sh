#!/bin/bash

# ====================================================================================================
# CONFIGURATION CRON TOKEN REFRESH
# ====================================================================================================
# Script pour configurer le syst√®me de rafra√Æchissement automatique des tokens Microsoft Graph
# Usage: ./scripts/setup-cron-token-refresh.sh
# ====================================================================================================

set -e

echo "üîß Configuration du syst√®me de rafra√Æchissement automatique des tokens..."

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ====================================================================================================
# V√âRIFICATIONS PR√âALABLES
# ====================================================================================================

echo -e "${BLUE}üìã V√©rification des pr√©requis...${NC}"

# V√©rifier que Supabase CLI est install√©
if ! command -v supabase &> /dev/null; then
    echo -e "${RED}‚ùå Supabase CLI non trouv√©${NC}"
    echo "Installez-le avec: npm install -g supabase"
    exit 1
fi

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "supabase/config.toml" ]; then
    echo -e "${RED}‚ùå Fichier supabase/config.toml non trouv√©${NC}"
    echo "Ex√©cutez ce script depuis la racine du projet"
    exit 1
fi

# V√©rifier le fichier .env.local
if [ ! -f ".env.local" ]; then
    echo -e "${RED}‚ùå Fichier .env.local non trouv√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Pr√©requis valid√©s${NC}"

# ====================================================================================================
# LECTURE DES VARIABLES D'ENVIRONNEMENT
# ====================================================================================================

echo -e "${BLUE}üìñ Lecture des variables d'environnement...${NC}"

# Source du fichier .env.local
set -a
source .env.local
set +a

# V√©rifications des variables requises
if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ]; then
    echo -e "${RED}‚ùå NEXT_PUBLIC_SUPABASE_URL non d√©finie${NC}"
    exit 1
fi

if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
    echo -e "${RED}‚ùå SUPABASE_SERVICE_ROLE_KEY non d√©finie${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Variables d'environnement valid√©es${NC}"

# ====================================================================================================
# CONFIGURATION DES SECRETS SUPABASE VAULT
# ====================================================================================================

echo -e "${BLUE}üîê Configuration des secrets Supabase Vault...${NC}"

# Stocker l'URL Supabase dans Vault
echo -e "${YELLOW}üìù Stockage de l'URL Supabase...${NC}"
supabase secrets set SUPABASE_URL="$NEXT_PUBLIC_SUPABASE_URL" || {
    echo -e "${RED}‚ùå Erreur lors du stockage de l'URL Supabase${NC}"
    exit 1
}

# Stocker la cl√© service role dans Vault
echo -e "${YELLOW}üìù Stockage de la cl√© service role...${NC}"
supabase secrets set SERVICE_ROLE_KEY="$SUPABASE_SERVICE_ROLE_KEY" || {
    echo -e "${RED}‚ùå Erreur lors du stockage de la cl√© service role${NC}"
    exit 1
}

echo -e "${GREEN}‚úÖ Secrets configur√©s dans Supabase Vault${NC}"

# ====================================================================================================
# APPLICATION DE LA MIGRATION
# ====================================================================================================

echo -e "${BLUE}üöÄ Application de la migration...${NC}"

# Appliquer les migrations
supabase db push || {
    echo -e "${RED}‚ùå Erreur lors de l'application des migrations${NC}"
    exit 1
}

echo -e "${GREEN}‚úÖ Migration appliqu√©e avec succ√®s${NC}"

# ====================================================================================================
# CONFIGURATION DES VARIABLES POSTGRESQL
# ====================================================================================================

echo -e "${BLUE}‚öôÔ∏è Configuration des variables PostgreSQL...${NC}"

# Configuration via SQL direct
supabase db remote sql --execute "
-- Configuration des variables syst√®me
SELECT set_config('app.supabase_url', '$NEXT_PUBLIC_SUPABASE_URL', false);
SELECT set_config('app.service_role_key', '$SUPABASE_SERVICE_ROLE_KEY', false);

-- Test de la configuration
SELECT 'URL configur√©e: ' || current_setting('app.supabase_url', true) as config_test;
" || {
    echo -e "${RED}‚ùå Erreur lors de la configuration PostgreSQL${NC}"
    exit 1
}

echo -e "${GREEN}‚úÖ Variables PostgreSQL configur√©es${NC}"

# ====================================================================================================
# TEST DU SYST√àME
# ====================================================================================================

echo -e "${BLUE}üß™ Test du syst√®me...${NC}"

# Test de la fonction de refresh
echo -e "${YELLOW}üìä Test de la fonction de refresh...${NC}"
supabase db remote sql --execute "SELECT * FROM test_token_refresh();" || {
    echo -e "${YELLOW}‚ö†Ô∏è Test de la fonction √©chou√© (normal si pas de tokens)${NC}"
}

# V√©rifier le job cron
echo -e "${YELLOW}üìÖ V√©rification du job cron...${NC}"
supabase db remote sql --execute "
SELECT 
    jobname, 
    schedule, 
    command,
    active
FROM cron.job 
WHERE jobname = 'microsoft-token-refresh';
" || {
    echo -e "${RED}‚ùå Erreur lors de la v√©rification du job cron${NC}"
    exit 1
}

# V√©rifier les statistiques
echo -e "${YELLOW}üìà Statistiques actuelles...${NC}"
supabase db remote sql --execute "SELECT * FROM token_refresh_stats;" || {
    echo -e "${YELLOW}‚ö†Ô∏è Pas de statistiques disponibles${NC}"
}

echo -e "${GREEN}‚úÖ Tests compl√©t√©s${NC}"

# ====================================================================================================
# R√âSUM√â DE LA CONFIGURATION
# ====================================================================================================

echo -e "\n${GREEN}üéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS${NC}"
echo -e "\n${BLUE}üìã R√âSUM√â:${NC}"
echo -e "   ${GREEN}‚úÖ${NC} Job cron configur√© : ex√©cution toutes les 30 minutes"
echo -e "   ${GREEN}‚úÖ${NC} Fonction PostgreSQL : refresh_expired_microsoft_tokens()"
echo -e "   ${GREEN}‚úÖ${NC} Secrets Vault configur√©s"
echo -e "   ${GREEN}‚úÖ${NC} Variables syst√®me configur√©es"
echo -e "   ${GREEN}‚úÖ${NC} Tables de logs cr√©√©es"

echo -e "\n${BLUE}üîç MONITORING:${NC}"
echo -e "   üìä Statistiques : ${YELLOW}SELECT * FROM token_refresh_stats;${NC}"
echo -e "   üìù Logs r√©cents : ${YELLOW}SELECT * FROM recent_cron_jobs;${NC}"
echo -e "   üß™ Test manuel : ${YELLOW}SELECT * FROM refresh_expired_microsoft_tokens();${NC}"

echo -e "\n${BLUE}‚è∞ PLANIFICATION:${NC}"
echo -e "   üïê Fr√©quence : Toutes les 30 minutes"
echo -e "   üéØ Cible : Tokens expirant dans moins de 30 minutes"
echo -e "   üìà Seuil : Refresh automatique si < 30 min restantes"

echo -e "\n${YELLOW}üí° NOTES IMPORTANTES:${NC}"
echo -e "   - Le syst√®me fonctionne en arri√®re-plan ind√©pendamment du frontend"
echo -e "   - Les logs sont stock√©s dans la table cron_job_logs"
echo -e "   - Le refresh utilise l'Edge Function microsoft-auth existante"
echo -e "   - Surveillance via les vues token_refresh_stats et recent_cron_jobs"

echo -e "\n${GREEN}üöÄ Le syst√®me de rafra√Æchissement automatique est maintenant op√©rationnel!${NC}"
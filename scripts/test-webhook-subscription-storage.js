#!/usr/bin/env node

/**
 * Script de test pour diagnostiquer les probl√®mes d'enregistrement 
 * des souscriptions webhook en base de donn√©es
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
import { randomBytes } from 'crypto'

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' })

const WEBHOOK_URL = "https://email-tracking-zeta.vercel.app"

async function testSupabaseConnection() {
  console.log('üîç TEST DE CONNEXION SUPABASE')
  console.log('===============================')
  
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
  const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

  console.log('Variables d\'environnement:')
  console.log(`‚úÖ NEXT_PUBLIC_SUPABASE_URL: ${supabaseUrl ? 'D√©finie' : '‚ùå Manquante'}`)
  console.log(`${serviceKey ? '‚úÖ' : '‚ùå'} SUPABASE_SERVICE_ROLE_KEY: ${serviceKey ? 'D√©finie' : 'Manquante'}`)
  console.log(`‚úÖ NEXT_PUBLIC_SUPABASE_ANON_KEY: ${anonKey ? 'D√©finie' : '‚ùå Manquante'}`)
  console.log()

  if (!supabaseUrl || !serviceKey) {
    console.error('‚ùå Variables d\'environnement manquantes')
    return false
  }

  // Test de connexion avec service role key
  const serviceSupabase = createClient(supabaseUrl, serviceKey)
  
  try {
    // Test basique de connexion
    const { data, error } = await serviceSupabase.from('webhook_subscriptions').select('count').limit(1)
    
    if (error) {
      console.error('‚ùå Erreur de connexion Supabase:', error)
      return false
    }
    
    console.log('‚úÖ Connexion Supabase r√©ussie')
    return true
  } catch (err) {
    console.error('‚ùå Erreur de connexion:', err)
    return false
  }
}

async function testTableAccess() {
  console.log('üìã TEST D\'ACC√àS AUX TABLES')
  console.log('==========================')
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )

  // Test d'acc√®s √† la table webhook_subscriptions
  try {
    const { data, error, count } = await supabase
      .from('webhook_subscriptions')
      .select('*', { count: 'exact' })
      .limit(5)

    if (error) {
      console.error('‚ùå Erreur d\'acc√®s √† webhook_subscriptions:', error)
      return false
    }

    console.log(`‚úÖ Table webhook_subscriptions accessible`)
    console.log(`üìä Nombre total de souscriptions: ${count}`)
    
    if (data && data.length > 0) {
      console.log('üìù Derni√®res souscriptions:')
      data.forEach((sub, index) => {
        console.log(`  ${index + 1}. ID: ${sub.subscription_id}`)
        console.log(`     User: ${sub.user_id}`)
        console.log(`     Status: ${sub.status}`)
        console.log(`     Cr√©ation: ${sub.created_at}`)
        console.log()
      })
    } else {
      console.log('üìù Aucune souscription trouv√©e')
    }

    return true
  } catch (err) {
    console.error('‚ùå Erreur lors du test de table:', err)
    return false
  }
}

async function testRLSPolicies() {
  console.log('üîí TEST DES POLITIQUES RLS')
  console.log('==========================')
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )

  try {
    // V√©rifier les policies RLS
    const { data: policies, error } = await supabase
      .rpc('pg_get_policies', { 
        table_name: 'webhook_subscriptions' 
      })
      .select('*')

    if (error) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les policies RLS (normal si pas d\'acc√®s syst√®me)')
    } else {
      console.log('‚úÖ Policies RLS trouv√©es:', policies?.length || 0)
    }

    // Test d'insertion avec un utilisateur fictif
    const testUserId = '00000000-0000-0000-0000-000000000000'
    const testSubscriptionId = `test-${Date.now()}`

    const { data: insertData, error: insertError } = await supabase
      .from('webhook_subscriptions')
      .insert({
        subscription_id: testSubscriptionId,
        user_id: testUserId,
        resource: '/me/messages',
        change_types: ['created', 'updated'],
        notification_url: `${WEBHOOK_URL}/api/webhooks/outlook`,
        expiration_datetime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
        client_state: randomBytes(16).toString('base64'),
        status: 'active'
      })
      .select()

    if (insertError) {
      console.error('‚ùå Erreur lors de l\'insertion test:', insertError)
      console.log('   ‚Üí Ceci pourrait expliquer pourquoi les souscriptions ne sont pas sauvegard√©es')
    } else {
      console.log('‚úÖ Insertion test r√©ussie')
      console.log('   ‚Üí Les souscriptions PEUVENT √™tre sauvegard√©es')
      
      // Nettoyer le test
      await supabase
        .from('webhook_subscriptions')
        .delete()
        .eq('subscription_id', testSubscriptionId)
      
      console.log('üßπ Nettoyage de l\'enregistrement test effectu√©')
    }

    return insertError === null
  } catch (err) {
    console.error('‚ùå Erreur lors du test RLS:', err)
    return false
  }
}

async function testWebhookServiceLogic() {
  console.log('üîß TEST DE LA LOGIQUE WEBHOOK SERVICE')
  console.log('=====================================')

  // Simuler la m√™me logique que WebhookService.createSubscription()
  console.log('Configuration webhook:')
  console.log(`  WEBHOOK_ENDPOINT_URL: ${process.env.WEBHOOK_ENDPOINT_URL || `${process.env.NEXT_PUBLIC_APP_URL}/api/webhooks/outlook`}`)
  console.log(`  WEBHOOK_CLIENT_STATE: ${process.env.WEBHOOK_CLIENT_STATE ? 'D√©fini' : 'G√©n√©r√© automatiquement'}`)
  console.log()

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )

  console.log(`Client Supabase configur√© avec: ${process.env.SUPABASE_SERVICE_ROLE_KEY ? 'SERVICE_ROLE_KEY' : 'ANON_KEY'}`)

  // Tester avec les m√™mes param√®tres que le vrai service
  const mockResponse = {
    id: `mock-subscription-${Date.now()}`,
    expirationDateTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString()
  }

  const mockOptions = {
    userId: '00000000-0000-0000-0000-000000000000',
    resourceType: 'messages',
    changeTypes: ['created', 'updated']
  }

  const notificationUrl = process.env.WEBHOOK_ENDPOINT_URL || 
    `${process.env.NEXT_PUBLIC_APP_URL}/api/webhooks/outlook`
  const clientState = process.env.WEBHOOK_CLIENT_STATE || 
    randomBytes(32).toString('base64')

  console.log('Param√®tres d\'insertion:')
  console.log(`  subscription_id: ${mockResponse.id}`)
  console.log(`  user_id: ${mockOptions.userId}`)
  console.log(`  resource: /me/messages`)
  console.log(`  notification_url: ${notificationUrl}`)
  console.log()

  const { error: dbError } = await supabase
    .from('webhook_subscriptions')
    .insert({
      subscription_id: mockResponse.id,
      user_id: mockOptions.userId,
      resource: '/me/messages',
      change_types: mockOptions.changeTypes,
      notification_url: notificationUrl,
      expiration_datetime: mockResponse.expirationDateTime,
      client_state: clientState,
      status: 'active'
    })

  if (dbError) {
    console.error('‚ùå Erreur lors de l\'insertion (m√™me logique que WebhookService):', dbError)
    console.log('   ‚Üí Ceci explique pourquoi les souscriptions ne sont pas sauvegard√©es!')
    
    // Analyser l'erreur
    if (dbError.code === '23503') {
      console.log('   ‚Üí Erreur de contrainte de cl√© √©trang√®re (user_id invalide?)')
    } else if (dbError.code === '42501') {
      console.log('   ‚Üí Erreur de permission (RLS?)')
    } else if (dbError.code === '23505') {
      console.log('   ‚Üí Violation de contrainte unique (subscription_id dupliqu√©?)')
    }
  } else {
    console.log('‚úÖ Insertion r√©ussie avec la m√™me logique que WebhookService')
    
    // Nettoyer
    await supabase
      .from('webhook_subscriptions')
      .delete()
      .eq('subscription_id', mockResponse.id)
    
    console.log('üßπ Nettoyage effectu√©')
  }

  return dbError === null
}

async function main() {
  console.log(`üîç DIAGNOSTIC D'ENREGISTREMENT DES SOUSCRIPTIONS WEBHOOK`)
  console.log(`========================================================`)
  console.log()

  const tests = [
    { name: 'Connexion Supabase', test: testSupabaseConnection },
    { name: 'Acc√®s aux tables', test: testTableAccess },
    { name: 'Politiques RLS', test: testRLSPolicies },
    { name: 'Logique WebhookService', test: testWebhookServiceLogic }
  ]

  let allPassed = true

  for (const { name, test } of tests) {
    try {
      const passed = await test()
      if (!passed) {
        allPassed = false
      }
      console.log()
    } catch (error) {
      console.error(`‚ùå Erreur lors du test "${name}":`, error)
      allPassed = false
      console.log()
    }
  }

  console.log('üìä R√âSUM√â FINAL')
  console.log('===============')
  if (allPassed) {
    console.log('‚úÖ Tous les tests sont pass√©s - le syst√®me devrait fonctionner')
    console.log('   ‚Üí Si les souscriptions ne s\'affichent toujours pas, v√©rifiez:')
    console.log('     ‚Ä¢ Les logs Vercel pendant la cr√©ation')
    console.log('     ‚Ä¢ Que user.id correspond bien entre l\'interface et l\'API')
  } else {
    console.log('‚ùå Des probl√®mes ont √©t√© d√©tect√©s')
    console.log('   ‚Üí Consultez les erreurs ci-dessus pour identifier la cause')
  }
}

// Ex√©cuter le diagnostic
main().catch(console.error)